{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Mean Stack Template - OpenAPI 3.0",
        "description": "Documentation of Mean Stack Template project developed by Lucas Rinaldi. Hope you guys enjoy and that will help you on your study journey.",
        "contact": {
            "email": "lucasreinaldi@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "externalDocs": {
        "description": "Find more projects on my Github!",
        "url": "https://github.com/rinaldilucas"
    },
    "servers": [
        {
            "url": "https://localhost:3000/api-docs"
        }
    ],
    "paths": {
        "/tasks": {
            "get": {
                "tags": ["Task"],
                "summary": "Returns all tasks",
                "description": "Returns all tasks which the user has access to.",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "path",
                        "description": "Size of the page to be fetched",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "path",
                        "description": "Term to be fetch withing the title of the task",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "path",
                        "description": "Index of the page to be fetched",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortFilter",
                        "in": "path",
                        "description": "Field to be sorted",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortDirection",
                        "in": "path",
                        "description": "Direction of the sort (asc or desc)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Task"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Task"],
                "summary": "Creates a new task.",
                "description": "Creates a new task for the current user. Duplicates are allowed.",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Id of the task to be created",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "path",
                        "description": "Title of the task to be created",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "path",
                        "description": "Description of the task to be created",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date",
                        "in": "path",
                        "description": "Date of the task to be created",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "path",
                        "description": "Status of the task to be created",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["toDo", "inProgress", "done"]
                        }
                    },
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category of the task to be created",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task to add",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Task"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Task"],
                "summary": "Updates a task.",
                "description": "Updates a task based on the body of requisition.",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Id of the task to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "path",
                        "description": "Title of the task to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "path",
                        "description": "Description of the task to be updated",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date",
                        "in": "path",
                        "description": "Date of the task to be updated",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "path",
                        "description": "Status of the task to be updated",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["toDo", "inProgress", "done"]
                        }
                    },
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category of the task to be updated",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Task"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Task"],
                "summary": "Removes a task.",
                "description": "Removes a single task based on the ID supplied.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of task to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks/by-interval/": {
            "get": {
                "tags": ["Task"],
                "summary": "Returns all tasks by interval.",
                "description": "Returns all tasks by two dates interval.",
                "parameters": [
                    {
                        "name": "startDate",
                        "in": "path",
                        "description": "Initial date to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "finalDate",
                        "in": "path",
                        "description": "Final date to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "tags": ["Task"],
                "summary": "Returns a task.",
                "description": "Returns a task based on a single ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of task to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": ["Category"],
                "summary": "Returns all categories.",
                "description": "Returns all categories which the user has access to.",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Category"],
                "summary": "Creates a new category.",
                "description": "Creates a new category for the current user. Duplicates are allowed.",
                "parameters": [
                    {
                        "name": "title",
                        "in": "path",
                        "description": "Title of the category to be created",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Category to add",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "delete": {
                "tags": ["Category"],
                "summary": "Removes a category.",
                "description": "Removes a single category based on the ID supplied.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response"
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "tags": ["User"],
                "summary": "Returns a user based on email.",
                "description": "Returns a user based email.",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email of user to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/authenticate": {
            "post": {
                "tags": ["Auth"],
                "summary": "Authenticate the user.",
                "description": "Authenticates the user and retrieve a JWT token.",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email of the user to be authenticated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "path",
                        "description": "Password of the user to be authenticated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "keepUserLoggedIn",
                        "in": "path",
                        "description": "Boolean value to maintain session of the user",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User to be authenticated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register a new user.",
                "description": "Register a new user.",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email of the user to be registered",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "path",
                        "description": "Password of the user to be registered",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "in": "path",
                        "description": "Role of the user to be registered",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["admin", "user"]
                        }
                    }
                ],
                "requestBody": {
                    "description": "User to be registered",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/changePassword": {
            "put": {
                "tags": ["Auth"],
                "summary": "Change the password.",
                "description": "Change the password of the user generating hash.",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Id of the user to have the password changed",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "path",
                        "description": "New password to be changed",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User to have the password changed",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "tags": ["Auth"],
                "summary": "Generate refresh token.",
                "description": "Generate a refresh token to user.",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "UserId to be refreshed",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email of the current user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "in": "path",
                        "description": "Role of the current user",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["admin", "user"]
                        }
                    },
                    {
                        "name": "expirationDate",
                        "in": "path",
                        "description": "Expiration date of the current user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "refreshToken",
                        "in": "path",
                        "description": "Refresh token to be regenerated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Refresh token to be genereated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": ["Auth"],
                "summary": "Sign out user.",
                "description": "Sign out user and invalidate token.",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "Token to be invalidated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Sign out user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unsuccessful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Task": {
                "type": "object",
                "required": ["title", "status", "userId"],
                "properties": {
                    "title": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 300
                    },
                    "date": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["toDo", "inProgress", "done"]
                    },
                    "category": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "date",
                        "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
                        "example": "2023-05-22"
                    },
                    "updatedAt": {
                        "type": "date",
                        "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
                        "example": "2023-05-22"
                    }
                }
            },
            "Category": {
                "type": "object",
                "required": ["name", "userId"],
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 2
                    },
                    "userId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "date",
                        "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
                        "example": "2023-05-22"
                    },
                    "updatedAt": {
                        "type": "date",
                        "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
                        "example": "2023-05-22"
                    }
                }
            },
            "User": {
                "type": "object",
                "required": ["email", "password", "role"],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 5,
                        "maxLength": 150,
                        "example": "user@gmail.com",
                        "pattern": "/^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$/",
                        "unique": true
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8,
                        "maxLength": 150
                    },
                    "role": {
                        "type": "string",
                        "enum": ["admin", "user"]
                    },
                    "createdAt": {
                        "type": "date",
                        "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
                        "example": "2023-05-22"
                    },
                    "updatedAt": {
                        "type": "date",
                        "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
                        "example": "2023-05-22"
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "string"
                    },
                    "status": {
                        "type": "number"
                    },
                    "message": {
                        "type": "string"
                    },
                    "validationErrors": {
                        "type": "array | object"
                    }
                }
            }
        }
    }
}

import { VIRTUAL_SCROLL_STRATEGY } from '@angular/cdk/scrolling';
import { CdkTable } from '@angular/cdk/table';
import { ContentChild, Directive, forwardRef, Input } from '@angular/core';
import { combineLatest, from, Subject } from 'rxjs';
import { delayWhen, distinctUntilChanged, map, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { FixedSizeTableVirtualScrollStrategy } from './fixed-size-table-virtual-scroll-strategy';
import { CdkTableVirtualScrollDataSource, isTVSDataSource, TableVirtualScrollDataSource } from './table-data-source';
import * as i0 from "@angular/core";
export function _tableVirtualScrollDirectiveStrategyFactory(tableDir) {
    return tableDir.scrollStrategy;
}
function combineSelectors(...pairs) {
    return pairs.map((selectors) => `${selectors.join(' ')}, ${selectors.join('')}`).join(', ');
}
const stickyHeaderSelector = combineSelectors(['.mat-mdc-header-row', '.mat-mdc-table-sticky'], ['.mat-header-row', '.mat-table-sticky'], ['.cdk-header-row', '.cdk-table-sticky']);
const stickyFooterSelector = combineSelectors(['.mat-mdc-footer-row', '.mat-mdc-table-sticky'], ['.mat-footer-row', '.mat-table-sticky'], ['.cdk-footer-row', '.cdk-table-sticky']);
function isMatTable(table) {
    return table instanceof CdkTable && table['stickyCssClass'].includes('mat');
}
function isCdkTable(table) {
    return table instanceof CdkTable && table['stickyCssClass'].includes('cdk');
}
const defaults = {
    rowHeight: 48,
    headerHeight: 56,
    headerEnabled: true,
    footerHeight: 48,
    footerEnabled: false,
    bufferMultiplier: 0.7
};
export class TableItemSizeDirective {
    constructor(zone) {
        this.zone = zone;
        this.destroyed$ = new Subject();
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.rowHeight = defaults.rowHeight;
        this.headerEnabled = defaults.headerEnabled;
        this.headerHeight = defaults.headerHeight;
        this.footerEnabled = defaults.footerEnabled;
        this.footerHeight = defaults.footerHeight;
        this.bufferMultiplier = defaults.bufferMultiplier;
        this.scrollStrategy = new FixedSizeTableVirtualScrollStrategy();
        this.dataSourceChanges = new Subject();
        this.resetStickyPositions = new Subject();
        this.stickyEnabled = {
            header: false,
            footer: false
        };
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
        this.dataSourceChanges.complete();
    }
    ngAfterContentInit() {
        const switchDataSourceOrigin = this.table['_switchDataSource'];
        this.table['_switchDataSource'] = (dataSource) => {
            switchDataSourceOrigin.call(this.table, dataSource);
            this.connectDataSource(dataSource);
        };
        const updateStickyColumnStylesOrigin = this.table.updateStickyColumnStyles;
        this.table.updateStickyColumnStyles = () => {
            const stickyColumnStylesNeedReset = this.table['_stickyColumnStylesNeedReset'];
            updateStickyColumnStylesOrigin.call(this.table);
            if (stickyColumnStylesNeedReset) {
                this.resetStickyPositions.next();
            }
        };
        this.connectDataSource(this.table.dataSource);
        combineLatest([
            this.scrollStrategy.stickyChange,
            this.resetStickyPositions.pipe(startWith(void 0), delayWhen(() => this.getScheduleObservable()), tap(() => {
                this.stickyPositions = null;
            }))
        ])
            .pipe(takeUntil(this.destroyed$))
            .subscribe(([stickyOffset]) => {
            if (!this.stickyPositions) {
                this.initStickyPositions();
            }
            if (this.stickyEnabled.header) {
                this.setStickyHeader(stickyOffset);
            }
            if (this.stickyEnabled.footer) {
                this.setStickyFooter(stickyOffset);
            }
        });
    }
    connectDataSource(dataSource) {
        this.dataSourceChanges.next();
        if (!isTVSDataSource(dataSource)) {
            throw new Error('[tvsItemSize] requires TableVirtualScrollDataSource or CdkTableVirtualScrollDataSource be set as [dataSource] of the table');
        }
        if (isMatTable(this.table) && !(dataSource instanceof TableVirtualScrollDataSource)) {
            throw new Error('[tvsItemSize] requires TableVirtualScrollDataSource be set as [dataSource] of [mat-table]');
        }
        if (isCdkTable(this.table) && !(dataSource instanceof CdkTableVirtualScrollDataSource)) {
            throw new Error('[tvsItemSize] requires CdkTableVirtualScrollDataSource be set as [dataSource] of [cdk-table]');
        }
        dataSource
            .dataToRender$
            .pipe(distinctUntilChanged(), takeUntil(this.dataSourceChanges), takeUntil(this.destroyed$), tap(data => this.scrollStrategy.dataLength = data.length), switchMap(data => this.scrollStrategy
            .renderedRangeStream
            .pipe(map(({ start, end }) => typeof start !== 'number' || typeof end !== 'number' ? data : data.slice(start, end)))))
            .subscribe(data => {
            this.zone.run(() => {
                dataSource.dataOfRange$.next(data);
            });
        });
    }
    ngOnChanges() {
        const config = {
            rowHeight: +this.rowHeight || defaults.rowHeight,
            headerHeight: this.headerEnabled ? +this.headerHeight || defaults.headerHeight : 0,
            footerHeight: this.footerEnabled ? +this.footerHeight || defaults.footerHeight : 0,
            bufferMultiplier: +this.bufferMultiplier || defaults.bufferMultiplier
        };
        this.scrollStrategy.setConfig(config);
    }
    setStickyEnabled() {
        if (!this.scrollStrategy.viewport) {
            this.stickyEnabled = {
                header: false,
                footer: false
            };
            return;
        }
        const isEnabled = (rowDefs) => rowDefs
            .map(def => def.sticky)
            .reduce((prevState, state) => prevState && state, true);
        this.stickyEnabled = {
            header: isEnabled(this.table['_headerRowDefs']),
            footer: isEnabled(this.table['_footerRowDefs']),
        };
    }
    setStickyHeader(offset) {
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
            .forEach((el) => {
            const parent = el.parentElement;
            let baseOffset = 0;
            if (this.stickyPositions.has(parent)) {
                baseOffset = this.stickyPositions.get(parent);
            }
            el.style.top = `${baseOffset - offset}px`;
        });
    }
    setStickyFooter(offset) {
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyFooterSelector)
            .forEach((el) => {
            const parent = el.parentElement;
            let baseOffset = 0;
            if (this.stickyPositions.has(parent)) {
                baseOffset = this.stickyPositions.get(parent);
            }
            el.style.bottom = `${-baseOffset + offset}px`;
        });
    }
    initStickyPositions() {
        this.stickyPositions = new Map();
        this.setStickyEnabled();
        if (this.stickyEnabled.header) {
            this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
                .forEach(el => {
                const parent = el.parentElement;
                if (!this.stickyPositions.has(parent)) {
                    this.stickyPositions.set(parent, parent.offsetTop);
                }
            });
        }
        if (this.stickyEnabled.footer) {
            this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyFooterSelector)
                .forEach(el => {
                const parent = el.parentElement;
                if (!this.stickyPositions.has(parent)) {
                    this.stickyPositions.set(parent, -parent.offsetTop);
                }
            });
        }
    }
    getScheduleObservable() {
        // Use onStable when in the context of an ongoing change detection cycle so that we
        // do not accidentally trigger additional cycles.
        return this.zone.isStable
            ? from(Promise.resolve(undefined))
            : this.zone.onStable.pipe(take(1));
    }
}
TableItemSizeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: TableItemSizeDirective, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
TableItemSizeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.4", type: TableItemSizeDirective, selector: "cdk-virtual-scroll-viewport[tvsItemSize]", inputs: { rowHeight: ["tvsItemSize", "rowHeight"], headerEnabled: "headerEnabled", headerHeight: "headerHeight", footerEnabled: "footerEnabled", footerHeight: "footerHeight", bufferMultiplier: "bufferMultiplier" }, providers: [{
            provide: VIRTUAL_SCROLL_STRATEGY,
            useFactory: _tableVirtualScrollDirectiveStrategyFactory,
            deps: [forwardRef(() => TableItemSizeDirective)]
        }], queries: [{ propertyName: "table", first: true, predicate: CdkTable, descendants: true }], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: TableItemSizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'cdk-virtual-scroll-viewport[tvsItemSize]',
                    providers: [{
                            provide: VIRTUAL_SCROLL_STRATEGY,
                            useFactory: _tableVirtualScrollDirectiveStrategyFactory,
                            deps: [forwardRef(() => TableItemSizeDirective)]
                        }]
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { rowHeight: [{
                type: Input,
                args: ['tvsItemSize']
            }], headerEnabled: [{
                type: Input
            }], headerHeight: [{
                type: Input
            }], footerEnabled: [{
                type: Input
            }], footerHeight: [{
                type: Input
            }], bufferMultiplier: [{
                type: Input
            }], table: [{
                type: ContentChild,
                args: [CdkTable, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,